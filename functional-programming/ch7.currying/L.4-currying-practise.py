# Doc2Doc needs to be able to find the number of lines in a document that 
# contain a specific sequence of characters. For example, given the following document:
#
# aaaa 
# bbbb 
# ccdd 
# aabb
#
# How many lines contain the sequence "aa"? The answer is 2: "aaaa" and "aabb".
#
# Complete the lines_with_sequence function. It should return a series of curried 
# functions so it can be called like this:
# num_lines = lines_with_sequence(char)(length)(doc)
#
# The "sequence" is generated by the first with_char that has been provided 
# for you. It works like this:
# Character	Length	Sequence
#   "a"	      3	      "aaa"
#   "b"	      2	       "bb"
#   "*"       4	      "****"
#
# You need to define and return a second curried function. I called mine with_length. 
# It should accept the final parameter, a doc string, and return the number of lines 
# that contain the sequence.
#
# 1. Define the with_length function inside the with_char function, it should accept a doc.
# 2. Split the doc into lines.
# 3. Use a loop (or if you're feeling fancy, use reduce) to count the number of lines that 
# contain the sequence in them.
# 4. Return the count from the with_length function.
# 5. Return the with_length function from the with_char function.

from functools import reduce

def lines_with_sequence(char):
    def with_char(length):
        sequence = char * length
        def with_length(doc):
            lines = doc.split("\n")
            counter = 0
            for line in lines:
                if sequence in line:
                    counter += 1
            return counter
        return with_length
    return with_char

doc = "aaaa\nbbbb\nccdd\naabb"
num_lines = lines_with_sequence("a")(2)(doc)  # Should return 2
print(num_lines)

# samething with reduce
def lines_with_sequence_reduce(char):
    def with_char(length):
        sequence = char * length
        def with_length(doc):
            lines = doc.split("\n")
            counter = reduce(
                lambda acc, line: acc + 1 if sequence in line else acc,
                lines,
                0
            )
            return counter
        return with_length
    return with_char

num_lines_reduce = lines_with_sequence_reduce("a")(2)(doc)  # Should return 2
print(num_lines_reduce)